


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Sudoku, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000 E59F06EC        LDR              R0, =gridOne ;load in the array
                                                            
   11 00000004 E3A01000        MOV              R1, #0      ; Row
   12 00000008 E3A02000        MOV              R2, #0      ; Column
   13 0000000C         ;MOV R3, #6 ;test Value for setSquare
   14 0000000C         ;BL getSquare ;call the getSquare subroutine
   15 0000000C         ;BL setSquare ;call the setSqaure subroutine
   16 0000000C         ;BL isValid ;call the isValid subroutine
   17 0000000C EB000152        BL               sudoku      ;call the sudoku su
                                                            broutine
   18 00000010 EB00019A        BL               print       ;call the print sub
                                                            routine (extra mile
                                                            )
   19 00000014         
   20 00000014 EAFFFFFE 
                       stop    B                stop
   21 00000018         
   22 00000018         getSquare
   23 00000018 E92D4007        STMFD            sp!, {R0-R2, lr}
   24 0000001C E3A05009        LDR              R5, = 9     ; Row and column si
                                                            ze.
   25 00000020 E0060591        MUL              R6, R1, R5  ; Index = Size*Row.
                                                            
   26 00000024 E0866002        ADD              R6, R6, R2  ; Index = index + c
                                                            olumn.
   27 00000028 E7D07006        LDRB             R7, [R0, R6] ; Load number into
                                                             R7
   28 0000002C E8BD8007        LDMFD            sp!, {R0-R2, pc}
   29 00000030 E12FFF1E        BX               lr
   30 00000034         
   31 00000034         setSquare
   32 00000034 E92D400F        STMFD            sp!, {R0-R3, lr}
   33 00000038 E1A04000        MOV              R4, R0
   34 0000003C E3A05009        LDR              R5, = 9     ; Row and column si
                                                            ze.
   35 00000040 E0060591        MUL              R6, R1, R5  ; Index = Column*Si
                                                            ze.
   36 00000044 E0866002        ADD              R6, R6, R2  ; Index = index + c
                                                            olumn.
   37 00000048 E7C43006        STRB             R3, [R4, R6] ; Store value of R
                                                            3 in the array inde
                                                            x.
   38 0000004C E8BD800F        LDMFD            sp!, {R0-R3, pc}
   39 00000050 E12FFF1E        BX               lr
   40 00000054         
   41 00000054         isValid
   42 00000054 E92D4007        STMFD            sp!, {R0-R2, lr}
   43 00000058 EBFFFFEE        BL               getSquare   ;call the getSquare
                                                             subroutine
   44 0000005C E3A06001        MOV              R6, #1      ;boolean valid = tr



ARM Macro Assembler    Page 2 


                                                            ue
   45 00000060 E3570000        CMP              R7, #0      ;if(getSqaure( arra
                                                            y, col, row) == ))
   46 00000064 0A000008        BEQ              finishedChecking ;{
   47 00000068 EB000009        BL               rowCheck    ;call the rowCheck 
                                                            subroutine
   48 0000006C E3560001        CMP              R6, #1      ;if(valid)
   49 00000070 0A000000        BEQ              validCheck  ;{ 
   50 00000074 EA000004        B                finishedChecking ;call the fini
                                                            shedChecking subrou
                                                            tine
   51 00000078         validCheck
   52 00000078 EB000022        BL               columnCheck ;call the checkColu
                                                            mn subroutine
   53 0000007C E3560001        CMP              R6, #1      ;if(valid) 
   54 00000080 0A000000        BEQ              gridCheck   ;{ 
   55 00000084 EA000000        B                finishedChecking ;finish the is
                                                            Valid subroutine
   56 00000088         
   57 00000088         gridCheck
   58 00000088 EB00003C        BL               checkThreeByThree ;call the che
                                                            ckThreeByThree subr
                                                            outine
   59 0000008C         
   60 0000008C         finishedChecking
   61 0000008C E8BD8007        LDMFD            sp!, {R0-R2, pc} ;finish the is
                                                            Valid subroutine
   62 00000090 E12FFF1E        BX               lr
   63 00000094         
   64 00000094         rowCheck
   65 00000094 E92D4007        STMFD            sp!, {R0-R2, lr}
   66 00000098 E3A06001        MOV              R6, #1      ;boolean valid = tr
                                                            ue
   67 0000009C E3A08000        MOV              R8, #0      ;counter
   68 000000A0 E3A09000        MOV              R9, #0      ;columnChecker = 0
   69 000000A4 EAFFFFFF        B                rowFor      ;call the for , in 
                                                            order to loop throu
                                                            gh the row elements
                                                            
   70 000000A8         rowFor
   71 000000A8 E3590009        CMP              R9, #9      ;for(columnChecker 
                                                            < 9 )
   72 000000AC BA000001        BLT              columnGreaterThanNine ;{
   73 000000B0 E3A06001        MOV              R6, #1      ;reset boolean
   74 000000B4 EA000011        B                finishRowFor
   75 000000B8         columnGreaterThanNine
   76 000000B8 EBFFFFD6        BL               getSquare   ;getSquare(Array, r
                                                            ow, col)
   77 000000BC E1A0C007        MOV              R12, R7     ;move the element i
                                                            nto local varibale
   78 000000C0 E1A0B002        MOV              R11, R2     ;int column 
   79 000000C4 E1A02009        MOV              R2, R9      ;pass in the paramt
                                                            ers
   80 000000C8 EBFFFFD2        BL               getSquare   ;getSquare(Array, r
                                                            ow, columnChecker 
   81 000000CC E1A0200B        MOV              R2, R11     ;reset parameter   
                                                            
   82 000000D0 E15C0007        CMP              R12, R7     ;if(old element == 
                                                            new element)



ARM Macro Assembler    Page 3 


   83 000000D4 0A000002        BEQ              sameElement ;{
   84 000000D8 E2899001        ADD              R9, R9, #1  ;columnChecker++
   85 000000DC E3A06001        MOV              R6, #1      ;boolean = true
   86 000000E0 EAFFFFF0        B                rowFor      ;continue to loop u
                                                            ntil done 9 times
   87 000000E4         sameElement
   88 000000E4 E2888001        ADD              R8, R8, #1  ;counter++
   89 000000E8 E3580001        CMP              R8, #1      ;if(conter>1)
   90 000000EC CA000001        BGT              inValid     ;{
   91 000000F0 E2899001        ADD              R9, R9, #1  ;columnChecker++  
   92 000000F4 EAFFFFEB        B                rowFor
   93 000000F8         inValid
   94 000000F8 E3A06000        MOV              R6, #0      ;valid
   95 000000FC EAFFFFFF        B                finishRowFor
   96 00000100         finishRowFor
   97 00000100 E8BD8007        LDMFD            sp!, {R0-R2, pc}
   98 00000104 E12FFF1E        BX               lr          ; 
   99 00000108         
  100 00000108         
  101 00000108         columnCheck
  102 00000108 E92D4007        STMFD            sp!, {R0-R2, lr} ; Row and colu
                                                            mn parameters
  103 0000010C E3A06001        MOV              R6, #1      ; boolean valid = t
                                                            rue
  104 00000110 E3A08000        MOV              R8, #0      ; int count = 0
  105 00000114 E3A09000        MOV              R9, #0      ; int rowChecker = 
                                                            0
  106 00000118 EAFFFFFF        B                columnFor
  107 0000011C         columnFor
  108 0000011C E3590009        CMP              R9, #9      ;if(rowChecker < 0)
                                                            
  109 00000120 BA000001        BLT              rowGreaterThanNine ;{
  110 00000124 E3A06001        MOV              R6, #1      ;valid = true
  111 00000128 EA000011        B                finishColumnFor ;
  112 0000012C         rowGreaterThanNine
  113 0000012C EBFFFFB9        BL               getSquare   ;getSquare(Array, r
                                                            ow, column)
  114 00000130 E1A0C007        MOV              R12, R7     ;move initial getSq
                                                            uare value into a l
                                                            ocal variable 
  115 00000134 E1A0B001        MOV              R11, R1     ;move parameter bac
                                                            k in
  116 00000138 E1A01009        MOV              R1, R9      ;pass in paramters
  117 0000013C EBFFFFB5        BL               getSquare   ;getSquare(Array, r
                                                            owChecker, column)
  118 00000140 E1A0100B        MOV              R1, R11     ;move back in the o
                                                            riginal parameter
  119 00000144 E15C0007        CMP              R12, R7     ;if(original getSqu
                                                            are() == new getSqu
                                                            are()) 
  120 00000148 0A000002        BEQ              sameElement1 ;{
  121 0000014C E2899001        ADD              R9, R9, #1  ;rowChecker++
  122 00000150 E3A06001        MOV              R6, #1      ;vallid = true 
  123 00000154 EAFFFFF0        B                columnFor   ;
  124 00000158         sameElement1
  125 00000158 E2888001        ADD              R8, R8, #1  ;count++
  126 0000015C E3580001        CMP              R8, #1      ;if(cunt>1)
  127 00000160 CA000001        BGT              inValid1    ;{ 
  128 00000164 E2899001        ADD              R9, R9, #1  ;rowChecker++



ARM Macro Assembler    Page 4 


  129 00000168 EAFFFFEB        B                columnFor   ;
  130 0000016C         inValid1
  131 0000016C E3A06000        MOV              R6, #0      ;valid = false
  132 00000170 EAFFFFFF        B                finishColumnFor
  133 00000174         finishColumnFor
  134 00000174 E8BD8007        LDMFD            sp!, {R0-R2, pc}
  135 00000178 E12FFF1E        BX               lr          ;
  136 0000017C         finish
  137 0000017C E8BD800F        LDMFD            sp!, {R0-R3, pc}
  138 00000180         
  139 00000180         checkThreeByThree
  140 00000180 E92D4007        STMFD            sp!, {R0-R2, lr}
  141 00000184 EBFFFFA3        BL               getSquare   ; call the getSquar
                                                            e subroutine
  142 00000188 E1A08007        MOV              R8, R7      ; initial getSquare
                                                             value
  143 0000018C E1A0B002        MOV              R11, R2     ; initial column
  144 00000190 E1A0C001        MOV              R12, R1     ; initial row
  145 00000194         
  146 00000194 E3510000        CMP              R1, #0      ;if(row == 0    
  147 00000198 0A00000F        BEQ              firstRow    ;||
  148 0000019C E3510003        CMP              R1, #3      ;row == 3
  149 000001A0 0A00000D        BEQ              firstRow    ;||
  150 000001A4 E3510006        CMP              R1, #6      ;row == 6)
  151 000001A8 0A00000B        BEQ              firstRow    ;{
  152 000001AC E3510001        CMP              R1, #1      ;if(row == 1   
  153 000001B0 0A000051        BEQ              secondRow   ;||
  154 000001B4 E3510004        CMP              R1, #4      ;row == 4
  155 000001B8 0A00004F        BEQ              secondRow   ;|| 
  156 000001BC E3510007        CMP              R1, #7      ;row == 7)
  157 000001C0 0A00004D        BEQ              secondRow   ;{
  158 000001C4 E3510002        CMP              R1, #2      ;if(row == 2    
  159 000001C8 0A000093        BEQ              thirdRow    ;||
  160 000001CC E3510005        CMP              R1, #5      ;row == 5
  161 000001D0 0A000091        BEQ              thirdRow    ;|| 
  162 000001D4 E3510008        CMP              R1, #8      ;row == 8) 
  163 000001D8 0A00008F        BEQ              thirdRow    ;{ 
  164 000001DC         
  165 000001DC         firstRow
  166 000001DC E3520000        CMP              R2, #0      ;if(column == 0
  167 000001E0 0A00000F        BEQ              firstRowFirstColumn ;||
  168 000001E4 E3520003        CMP              R2, #3      ;column == 3
  169 000001E8 0A00000D        BEQ              firstRowFirstColumn ;||
  170 000001EC E3520006        CMP              R2, #6      ;column == 6)
  171 000001F0 0A00000B        BEQ              firstRowFirstColumn ;{ 
  172 000001F4 E3520001        CMP              R2, #1      ;if(column == 1
  173 000001F8 0A00001B        BEQ              firstRowSecondColumn ;|| 
  174 000001FC E3520004        CMP              R2, #4      ;column == 4 
  175 00000200 0A000019        BEQ              firstRowSecondColumn ;||
  176 00000204 E3520007        CMP              R2, #7      ;column == 7) 
  177 00000208 0A000017        BEQ              firstRowSecondColumn ;{
  178 0000020C E3520002        CMP              R2, #2      ;if(column == 2
  179 00000210 0A000027        BEQ              firstRowThirdColumn ;|| 
  180 00000214 E3520005        CMP              R2, #5      ;column == 5
  181 00000218 0A000025        BEQ              firstRowThirdColumn ;||
  182 0000021C E3520008        CMP              R2, #8      ;column == 8)
  183 00000220 0A000023        BEQ              firstRowThirdColumn ;{
  184 00000224         
  185 00000224         firstRowFirstColumn



ARM Macro Assembler    Page 5 


  186 00000224 E2811001        ADD              R1, R1, #1  ; row = row + 1
  187 00000228 E2822001        ADD              R2, R2, #1  ; col = col +1
  188 0000022C EBFFFF79        BL               getSquare   ; call the getSquar
                                                            e subroutine
  189 00000230 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  190 00000234 0A0000C0        BEQ              false       ;return false
  191 00000238 E2822001        ADD              R2, R2, #1  ;col = col +2
  192 0000023C EBFFFF75        BL               getSquare   ;call the getSquare
                                                             subroutine
  193 00000240 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  194 00000244 0A0000BC        BEQ              false       ;return false
  195 00000248 E2811001        ADD              R1, R1, #1  ;row = row+2 
  196 0000024C EBFFFF71        BL               getSquare   ;call the getSquare
                                                             subroutine
  197 00000250 E1580007        CMP              R8,R7       ;if(initial == curr
                                                            ent) 
  198 00000254 0A0000B8        BEQ              false       ;return false
  199 00000258 E2422001        SUB              R2, R2, #1  ;row 1, col 2
  200 0000025C EBFFFF6D        BL               getSquare   ;call the getSquare
                                                             subroutine
  201 00000260 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  202 00000264 0A0000B4        BEQ              false       ;return false
  203 00000268 EA0000B7        B                true        ;return true
  204 0000026C         
  205 0000026C         firstRowSecondColumn
  206 0000026C E2811001        ADD              R1, R1, #1  ;row = row + 1
  207 00000270 E2822001        ADD              R2, R2, #1  ;col = col +1
  208 00000274 EBFFFF67        BL               getSquare   ;call the getSquare
                                                             subroutine
  209 00000278 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  210 0000027C 0A0000AE        BEQ              false       ;return false
  211 00000280 E2422002        SUB              R2, R2, #2  ;row+1, col-1
  212 00000284 EBFFFF63        BL               getSquare   ;call the getSquare
                                                             subroutine
  213 00000288 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  214 0000028C 0A0000AA        BEQ              false       ;return false
  215 00000290 E2811001        ADD              R1, R1, #1  ;row+2,col-1
  216 00000294 EBFFFF5F        BL               getSquare   ;call the getSquare
                                                             subroutine 
  217 00000298 E1580007        CMP              R8,R7       ;if(initial == curr
                                                            ent) 
  218 0000029C 0A0000A6        BEQ              false       ;return false
  219 000002A0 E2822002        ADD              R2, R2, #2  ;row 2, col 1
  220 000002A4 EBFFFF5B        BL               getSquare   ;call the getSquare
                                                             subroutine
  221 000002A8 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  222 000002AC 0A0000A2        BEQ              false       ;return false
  223 000002B0 EA0000A5        B                true        ;return true
  224 000002B4         
  225 000002B4         firstRowThirdColumn
  226 000002B4 E2811001        ADD              R1, R1, #1  ;row = row+1, 
  227 000002B8 E2422001        SUB              R2, R2, #1  ;col = col-1
  228 000002BC EBFFFF55        BL               getSquare   ;call the getSquare



ARM Macro Assembler    Page 6 


                                                             subroutine
  229 000002C0 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  230 000002C4 0A00009C        BEQ              false       ;return false
  231 000002C8 E2422001        SUB              R2, R2, #1  ;col = col-2
  232 000002CC EBFFFF51        BL               getSquare   ;call the getSquare
                                                             subroutine
  233 000002D0 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) { 
  234 000002D4 0A000098        BEQ              false       ;return false
  235 000002D8 E2811001        ADD              R1, R1, #1  ;row = row+2
  236 000002DC EBFFFF4D        BL               getSquare   ;call the getSquare
                                                             subroutine 
  237 000002E0 E1580007        CMP              R8,R7       ;if(initial == curr
                                                            ent) 
  238 000002E4 0A000094        BEQ              false       ;return false
  239 000002E8 E2822001        ADD              R2, R2, #1  ;col = col - 1
  240 000002EC EBFFFF49        BL               getSquare   ;call the getSquare
                                                             subroutine 
  241 000002F0 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  242 000002F4 0A000090        BEQ              false       ;return false
  243 000002F8 EA000093        B                true        ;return true
  244 000002FC         
  245 000002FC         secondRow
  246 000002FC E3520000        CMP              R2, #0      ;if(column == 0
  247 00000300 0A00000F        BEQ              secondRowFirstColumn ;||
  248 00000304 E3520003        CMP              R2, #3      ;column == 3
  249 00000308 0A00000D        BEQ              secondRowFirstColumn ;||
  250 0000030C E3520006        CMP              R2, #6      ;column == 6) 
  251 00000310 0A00000B        BEQ              secondRowFirstColumn ;{
  252 00000314 E3520001        CMP              R2, #1      ;if(column == 1
  253 00000318 0A00001B        BEQ              secondRowSecondColumn ;||
  254 0000031C E3520004        CMP              R2, #4      ;column == 4
  255 00000320 0A000019        BEQ              secondRowSecondColumn ;||
  256 00000324 E3520007        CMP              R2, #7      ;column == 7)
  257 00000328 0A000017        BEQ              secondRowSecondColumn ;{
  258 0000032C E3520002        CMP              R2, #2      ;if(column == 2
  259 00000330 0A000027        BEQ              secondRowThirdColumn ;||
  260 00000334 E3520005        CMP              R2, #5      ;column == 5
  261 00000338 0A000025        BEQ              secondRowThirdColumn ;||
  262 0000033C E3520008        CMP              R2, #8      ;column == 8) 
  263 00000340 0A000023        BEQ              secondRowThirdColumn ;{
  264 00000344         
  265 00000344         secondRowFirstColumn
  266 00000344 E2811001        ADD              R1, R1, #1  ;row = row+1
  267 00000348 E2822001        ADD              R2, R2, #1  ;col = col +1
  268 0000034C EBFFFF31        BL               getSquare   ;call the getSquare
                                                             subroutine
  269 00000350 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  270 00000354 0A000078        BEQ              false       ;return false
  271 00000358 E2822001        ADD              R2, R2, #1  ;col = col + 2
  272 0000035C EBFFFF2D        BL               getSquare   ;call the getSquare
                                                             subroutine
  273 00000360 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  274 00000364 0A000074        BEQ              false       ;return false
  275 00000368 E2411002        SUB              R1, R1, #2  ;row = row - 1



ARM Macro Assembler    Page 7 


  276 0000036C EBFFFF29        BL               getSquare   ;call the getSquare
                                                             subroutine
  277 00000370 E1580007        CMP              R8,R7       ;if(initial == curr
                                                            ent)  
  278 00000374 0A000070        BEQ              false       ;return false
  279 00000378 E2422001        SUB              R2, R2, #1  ;col = col + 1 
  280 0000037C EBFFFF25        BL               getSquare   ;call the getSquare
                                                             subroutine
  281 00000380 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  282 00000384 0A00006C        BEQ              false       ;return false
  283 00000388 EA00006F        B                true        ;return true
  284 0000038C         
  285 0000038C         secondRowSecondColumn
  286 0000038C E2811001        ADD              R1, R1, #1  ;row = row+1
  287 00000390 E2822001        ADD              R2, R2, #1  ;col = col + 1 
  288 00000394 EBFFFF1F        BL               getSquare   ;call the getSquare
                                                             subroutine
  289 00000398 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent)  
  290 0000039C 0A000066        BEQ              false       ;return false
  291 000003A0 E2422002        SUB              R2, R2, #2  ;col = col -1
  292 000003A4 EBFFFF1B        BL               getSquare   ;call the getSquare
                                                             subroutine
  293 000003A8 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  294 000003AC 0A000062        BEQ              false       ;return false
  295 000003B0 E2411002        SUB              R1, R1, #2  ;row = row - 1
  296 000003B4 EBFFFF17        BL               getSquare   ;call the getSquare
                                                             subroutine
  297 000003B8 E1580007        CMP              R8,R7       ;if(initial == curr
                                                            ent) 
  298 000003BC 0A00005E        BEQ              false       ;return false
  299 000003C0 E2822002        ADD              R2, R2, #2  ;col = col + 1
  300 000003C4 EBFFFF13        BL               getSquare   ;call the getSquare
                                                             subroutine
  301 000003C8 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent)   
  302 000003CC 0A00005A        BEQ              false       ;return false
  303 000003D0 EA00005D        B                true        ;return true 
  304 000003D4         
  305 000003D4         secondRowThirdColumn
  306 000003D4 E2811001        ADD              R1, R1, #1  ;row = row+1
  307 000003D8 E2422001        SUB              R2, R2, #1  ;col = col-1 
  308 000003DC EBFFFF0D        BL               getSquare   ;call the getSquare
                                                             subroutine
  309 000003E0 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent)  
  310 000003E4 0A000054        BEQ              false       ;return false
  311 000003E8 E2422001        SUB              R2, R2, #1  ;col = col -2
  312 000003EC EBFFFF09        BL               getSquare   ;call the getSquare
                                                             subroutine
  313 000003F0 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  314 000003F4 0A000050        BEQ              false       ;return false
  315 000003F8 E2411002        SUB              R1, R1, #2  ;row = row -1
  316 000003FC EBFFFF05        BL               getSquare   ;call the getSquare
                                                             subroutine  
  317 00000400 E1580007        CMP              R8,R7       ;if(initial == curr



ARM Macro Assembler    Page 8 


                                                            ent) 
  318 00000404 0A00004C        BEQ              false       ;return false
  319 00000408 E2822001        ADD              R2, R2, #1  ;col = col -1
  320 0000040C EBFFFF01        BL               getSquare   ;call the getSquare
                                                             subroutine
  321 00000410 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  322 00000414 0A000048        BEQ              false       ;return false
  323 00000418 EA00004B        B                true        ;return true
  324 0000041C         
  325 0000041C         thirdRow
  326 0000041C E3520000        CMP              R2, #0      ;if(column == 0
  327 00000420 0A00000F        BEQ              thirdRowFirstColumn ;|| 
  328 00000424 E3520003        CMP              R2, #3      ;column == 3 
  329 00000428 0A00000D        BEQ              thirdRowFirstColumn ;||  
  330 0000042C E3520006        CMP              R2, #6      ;column == 6)
  331 00000430 0A00000B        BEQ              thirdRowFirstColumn ;{ 
  332 00000434 E3520001        CMP              R2, #1      ;if(column == 1 
  333 00000438 0A00001B        BEQ              thirdRowSecondColumn ;|| 
  334 0000043C E3520004        CMP              R2, #4      ;column == 4  
  335 00000440 0A000019        BEQ              thirdRowSecondColumn ;||
  336 00000444 E3520007        CMP              R2, #7      ;column == 7) 
  337 00000448 0A000017        BEQ              thirdRowSecondColumn ;{
  338 0000044C E3520002        CMP              R2, #2      ;if(column == 2
  339 00000450 0A000027        BEQ              thirdRowThirdColumn ;||
  340 00000454 E3520005        CMP              R2, #5      ;column == 5
  341 00000458 0A000025        BEQ              thirdRowThirdColumn ;||
  342 0000045C E3520008        CMP              R2, #8      ;column == 8)
  343 00000460 0A000023        BEQ              thirdRowThirdColumn ;{
  344 00000464         
  345 00000464         thirdRowFirstColumn
  346 00000464 E2411001        SUB              R1, R1, #1  ;row = row-1 
  347 00000468 E2822001        ADD              R2, R2, #1  ;col = col +1 
  348 0000046C EBFFFEE9        BL               getSquare   ;call the getSquare
                                                             subroutine
  349 00000470 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent)  
  350 00000474 0A000030        BEQ              false       ;return false
  351 00000478 E2822001        ADD              R2, R2, #1  ;col = col +2
  352 0000047C EBFFFEE5        BL               getSquare   ;call the getSquare
                                                             subroutine
  353 00000480 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  354 00000484 0A00002C        BEQ              false       ;return false
  355 00000488 E2411001        SUB              R1, R1, #1  ;row = row -2 
  356 0000048C EBFFFEE1        BL               getSquare   ;call the getSquare
                                                             subroutine
  357 00000490 E1580007        CMP              R8,R7       ;if(initial == curr
                                                            ent) 
  358 00000494 0A000028        BEQ              false       ;return false
  359 00000498 E2422001        SUB              R2, R2, #1  ;col = col +1
  360 0000049C EBFFFEDD        BL               getSquare   ;call the getSquare
                                                             subroutine
  361 000004A0 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  362 000004A4 0A000024        BEQ              false       ;return false
  363 000004A8 EA000027        B                true        ;return true
  364 000004AC         
  365 000004AC         thirdRowSecondColumn



ARM Macro Assembler    Page 9 


  366 000004AC E2411001        SUB              R1, R1, #1  ;row = row-1
  367 000004B0 E2422001        SUB              R2, R2, #1  ;col = col-1  
  368 000004B4 EBFFFED7        BL               getSquare   ;call the getSquare
                                                             subroutine
  369 000004B8 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent)  
  370 000004BC 0A00001E        BEQ              false       ;return false
  371 000004C0 E2411001        SUB              R1, R1, #1  ;row = row-2
  372 000004C4 EBFFFED3        BL               getSquare   ;call the getSquare
                                                             subroutine
  373 000004C8 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  374 000004CC 0A00001A        BEQ              false       ;return false
  375 000004D0 E2822003        ADD              R2, R2, #3  ;col = col +2
  376 000004D4 EBFFFECF        BL               getSquare   ;call the getSquare
                                                             subroutine
  377 000004D8 E1580007        CMP              R8,R7       ;if(initial == curr
                                                            ent) 
  378 000004DC 0A000016        BEQ              false       ;return false
  379 000004E0 E2811001        ADD              R1, R1, #1  ;row = row -1
  380 000004E4 EBFFFECB        BL               getSquare   ;call the getSquare
                                                             subroutine
  381 000004E8 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  382 000004EC 0A000012        BEQ              false       ;return false
  383 000004F0 EA000015        B                true        ;return true
  384 000004F4         
  385 000004F4         thirdRowThirdColumn
  386 000004F4 E2411001        SUB              R1, R1, #1  ;row = row-1
  387 000004F8 E2422001        SUB              R2, R2, #1  ;col = col - 1  
  388 000004FC EBFFFEC5        BL               getSquare   ;call the getSquare
                                                             subroutine
  389 00000500 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent)  
  390 00000504 0A00000C        BEQ              false       ;return false
  391 00000508 E2422001        SUB              R2, R2, #1  ;col = col -2
  392 0000050C EBFFFEC1        BL               getSquare   ;call the getSquare
                                                             subroutine
  393 00000510 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent)  
  394 00000514 0A000008        BEQ              false       ;return false
  395 00000518 E2411001        SUB              R1, R1, #1  ;row = row -2
  396 0000051C EBFFFEBD        BL               getSquare   ;call the getSquare
                                                             subroutine
  397 00000520 E1580007        CMP              R8,R7       ;if(initial == curr
                                                            ent) 
  398 00000524 0A000004        BEQ              false       ;return false
  399 00000528 E2822001        ADD              R2, R2, #1  ;col = col +1
  400 0000052C EBFFFEB9        BL               getSquare   ;call the getSquare
                                                             subroutine
  401 00000530 E1580007        CMP              R8, R7      ;if(initial == curr
                                                            ent) 
  402 00000534 0A000000        BEQ              false       ;return false
  403 00000538 EA000003        B                true        ;return true
  404 0000053C         
  405 0000053C         false
  406 0000053C E3A06000        MOV              R6, #0      ;boolean valid = fa
                                                            lse
  407 00000540 E1A0100C        MOV              R1, R12     ;pass back in the P



ARM Macro Assembler    Page 10 


                                                            arameters
  408 00000544 E1A0200B        MOV              R2, R11     ;pass back in the P
                                                            arameters
  409 00000548 E8BD8007        LDMFD            sp!, {R0-R2, pc}
  410 0000054C         true
  411 0000054C E3A06001        MOV              R6, #1      ;boolean valid = tr
                                                            ue
  412 00000550 E1A0100C        MOV              R1, R12     ;pass back in the P
                                                            arameters
  413 00000554 E1A0200B        MOV              R2, R11     ;pass back in the P
                                                            arameters
  414 00000558 E8BD8007        LDMFD            sp!, {R0-R2, pc}
  415 0000055C         
  416 0000055C         sudoku
  417 0000055C E92D47F0        STMFD            sp!, {R4-R10, lr}
  418 00000560         
  419 00000560 E1A04000        MOV              R4, R0      ;move parameter int
                                                            o a local variable 
                                                            (array)
  420 00000564 E1A05001        MOV              R5, R1      ;move parameter int
                                                            o a local variable 
                                                            (current row)
  421 00000568 E1A06002        MOV              R6, R2      ;move parameter int
                                                            o a local variable 
                                                            (current column)
  422 0000056C         
  423 0000056C E3A07000        MOV              R7, #0      ;boolean result = f
                                                            alse
  424 00000570 E1A08005        MOV              R8, R5      ;nxtRow = row
  425 00000574 E2869001        ADD              R9, R6, #1  ;nxtCol = col +1
  426 00000578         
  427 00000578 E3590008        CMP              R9, #8      ;if (nxtcol > 8)
  428 0000057C DA000001        BLE              lessThanEight ;{
  429 00000580 E3A09000        MOV              R9, #0      ;nxtcol = 0
  430 00000584 E2888001        ADD              R8, R8, #1  ;nxtrow++
  431 00000588         
  432 00000588         lessThanEight
  433 00000588 E1A00004        MOV              R0, R4      ;pass in the parame
                                                            ters
  434 0000058C E1A01005        MOV              R1, R5      ;pass in the parame
                                                            ters
  435 00000590 E1A02006        MOV              R2, R6      ;pass in the parame
                                                            ters
  436 00000594 EBFFFE9F        BL               getSquare   ;call the subroutin
                                                            e getSquare
  437 00000598 E3570000        CMP              R7, #0      ; R7 is where I sto
                                                            re the getSquare re
                                                            sult
  438 0000059C 0A00000F        BEQ              squareNotZero
  439 000005A0 E1A00004        MOV              R0, R4      ;pass in the parame
                                                            ters
  440 000005A4 E1A01005        MOV              R1, R5      ;pass in the parame
                                                            ters
  441 000005A8 E1A02005        MOV              R2, R5      ;pass in the parame
                                                            ters
  442 000005AC EBFFFEA8        BL               isValid     ; isValid( int[] Ar
                                                            ray, nxtrow, nxtcol
                                                            )
  443 000005B0 E3560001        CMP              R6, #1      ; is the result boo



ARM Macro Assembler    Page 11 


                                                            lean of isValid
  444 000005B4 1A000009        BNE              squareNotZero
  445 000005B8 E3550008        CMP              R5, #8      ;if (row == 8
  446 000005BC 1A000003        BNE              notEight    ;&&
  447 000005C0 E3560008        CMP              R6, #8      ;col==8)
  448 000005C4 1A000001        BNE              notEight    ;{
  449 000005C8 E3A07001        LDR              R7, = 1     ; return true( 1 = 
                                                            true)
  450 000005CC E8BD800F        LDMFD            sp!, {R0-R3, pc}
  451 000005D0         
  452 000005D0         notEight
  453 000005D0 E1A00004        MOV              R0, R4      ;pass in the parame
                                                            ters
  454 000005D4 E1A01008        MOV              R1, R8      ;pass in the parame
                                                            ters
  455 000005D8 E1A02009        MOV              R2, R9      ;pass in the parame
                                                            ters
  456 000005DC EBFFFFDE        BL               sudoku      ;esult = sudoku(arr
                                                            ay, nxtRow, nxtCol)
                                                            ;
  457 000005E0         
  458 000005E0         squareNotZero
  459 000005E0 E3A0A001        LDR              R10, =1     ;int num =1
  460 000005E4 E3A07000        LDR              R7, =0
  461 000005E8         
  462 000005E8         for
  463 000005E8 E35A0009        CMP              R10, #9     ;if(num<=9
  464 000005EC 8A00001A        BHI              endFor      ;&&
  465 000005F0 E3570001        CMP              R7, #1      ;!result)
  466 000005F4 1A000018        BNE              endFor      ;{
  467 000005F8 E1A00004        MOV              R0, R4      ;pass in parameters
                                                            
  468 000005FC E1A01005        MOV              R1, R5      ;pass in parameters
                                                            
  469 00000600 E1A02006        MOV              R2, R6      ;pass in parameters
                                                            
  470 00000604 E1A0300A        MOV              R3, R10     ;pass in parameters
                                                            
  471 00000608 EBFFFE89        BL               setSquare   ;setSquare(numL, ro
                                                            w, col, num);
  472 0000060C E1A00004        MOV              R0, R4      ;pass in parameters
                                                            
  473 00000610 E1A01005        MOV              R1, R5      ;pass in parameters
                                                            
  474 00000614 E1A02006        MOV              R2, R6      ;pass in parameters
                                                            
  475 00000618 EBFFFE8D        BL               isValid     ;isValid(array, row
                                                            , col)
  476 0000061C E3560001        CMP              R6, #1      ;R6 is boolean for 
                                                            isValid
  477 00000620 1A000009        BNE              notValid2
  478 00000624 E3550008        CMP              R5, #8      ;R11 = nxtRow
  479 00000628 1A000003        BNE              else3
  480 0000062C E3560008        CMP              R6, #8      ;R12 = nxtCol
  481 00000630 1A000001        BNE              else3
  482 00000634 E3A05001        LDR              R5, =1      ;return true
  483 00000638 E8BD800F        LDMFD            sp!, {R0-R3, pc}
  484 0000063C         
  485 0000063C         else3



ARM Macro Assembler    Page 12 


  486 0000063C E1A00004        MOV              R0, R4      ;pass in parameters
                                                            
  487 00000640 E1A01008        MOV              R1, R8      ;pass in parameters
                                                            
  488 00000644 E1A02009        MOV              R2, R9      ;pass in parameters
                                                            
  489 00000648 EBFFFFC3        BL               sudoku      ;result = sudoku(nu
                                                            mL, nxtrow, nxtcol)
                                                            ;
  490 0000064C         
  491 0000064C         notValid2
  492 0000064C E28AA001        ADD              R10, R10, #1 ;num++
  493 00000650 EAFFFFE4        B                for
  494 00000654         
  495 00000654         resetTry
  496 00000654 E3A0A001        MOV              R10, #1
  497 00000658 EAFFFFE2        B                for
  498 0000065C         
  499 0000065C         endFor
  500 0000065C E3570000        CMP              R7, #0      ;if(!result)
  501 00000660 1A000005        BNE              done        ;{
  502 00000664 E1A00004        MOV              R0, R4      ;pass in the parame
                                                            ters
  503 00000668 E1A01005        MOV              R1, R5      ;pass in the parame
                                                            ters
  504 0000066C E1A02006        MOV              R2, R6      ;pass in the parame
                                                            ters#
  505 00000670 E3A03000        MOV              R3, #0      ;num = 0
  506 00000674 E1A0300A        MOV              R3, R10     ;pass in the parame
                                                            ters
  507 00000678 EBFFFE6D        BL               setSquare   ;setSquare(numL, ro
                                                            w, col, 0)
  508 0000067C         done
  509 0000067C E8BD87F0        LDMFD            sp!, {R4-R10, pc}
  510 00000680         
  511 00000680         print
  512 00000680 E92D47F0        STMFD            sp!, {R4-R10, lr}
  513 00000684 E1A04000        MOV              R4, R0      ;move array into lo
                                                            cal variable
  514 00000688 E3A08000        LDR              R8, =0      ;row 
  515 0000068C E3A09000        LDR              R9, =0      ;column
  516 00000690 E3A0A000        LDR              R10, =0     ; rowCounter
  517 00000694 E3A0B000        LDR              R11, = 0    ;finalCounter
  518 00000698         
  519 00000698         forPrint
  520 00000698 E35A0009        CMP              R10, #9     ;for( row counter <
                                                             9 
  521 0000069C 0A00000D        BEQ              changeColumn ;&&
  522 000006A0 E35B0051        CMP              R11, #81    ;final counter < 81
                                                            ) 
  523 000006A4 0A000011        BEQ              finishProgram ;else endProgram
  524 000006A8 E1A01008        MOV              R1, R8      ;pass in the parame
                                                            ters for getSquare
  525 000006AC E1A02009        MOV              R2, R9      ;pass in the parame
                                                            ters for getSquare
  526 000006B0 E1A00004        MOV              R0, R4      ;pass in the parame
                                                            ters for getSquare
  527 000006B4 EBFFFE57        BL               getSquare   ;(getSquare(array, 
                                                            row, col)



ARM Macro Assembler    Page 13 


  528 000006B8 E2870030        ADD              R0, R7, #0x30 ;convert to ascii
                                                            
  529 000006BC EBFFFFFE        BL               sendchar    ;send value in R0 t
                                                            o console
  530 000006C0 E3A00020        MOV              R0, #0x20   ;add a space to R0 
                                                            to have a gap betwe
                                                            een the elements
  531 000006C4 EBFFFFFE        BL               sendchar    ;send value  in R0 
                                                            to console
  532 000006C8 E28AA001        ADD              R10, R10, #1 ;rowCounter++
  533 000006CC E28BB001        ADD              R11, R11, #1 ;finalCounter++
  534 000006D0 E2899001        ADD              R9, R9, #1  ;column++
  535 000006D4 EAFFFFEF        B                forPrint
  536 000006D8         
  537 000006D8         changeColumn
  538 000006D8 E3A0000A        MOV              R0, #0x0A   ;assign R0 to a lin
                                                            e break 
  539 000006DC EBFFFFFE        BL               sendchar    ;send value in R0 t
                                                            o console
  540 000006E0 E3A09000        LDR              R9, =0      ;reset column to 0
  541 000006E4 E2888001        ADD              R8, R8, #1  ;row++
  542 000006E8 E3A0A000        MOV              R10, #0     ;reset rowCounter t
                                                            o 0
  543 000006EC EAFFFFE9        B                forPrint
  544 000006F0         
  545 000006F0         
  546 000006F0         finishProgram
  547 000006F0 E8BD87F0        LDMFD            sp!, {R4-R10, pc}
  548 000006F4         
  549 000006F4         
  550 000006F4 00000000        AREA             Grids, DATA, READWRITE
  551 00000000         
  552 00000000         gridOne
  553 00000000 00 07 00 
              00 00 00 
              00 00 00         DCB              0,7,0,0,0,0,0,0,0
  554 00000009 00 00 00 
              00 00 06 
              09 00 00         DCB              0,0,0,0,0,6,9,0,0
  555 00000012 00 00 00 
              08 03 00 
              00 07 06         DCB              0,0,0,8,3,0,0,7,6
  556 0000001B 00 00 00 
              00 00 05 
              00 00 02         DCB              0,0,0,0,0,5,0,0,2
  557 00000024 00 07 05 
              04 01 08 
              07 00 00         DCB              0,7,5,4,1,8,7,0,0
  558 0000002D 00 00 00 
              07 00 00 
              00 00 00         DCB              0,0,0,7,0,0,0,0,0
  559 00000036 06 01 00 
              00 09 00 
              00 00 08         DCB              6,1,0,0,9,0,0,0,8
  560 0000003F 00 00 02 
              03 00 00 
              00 00 00         DCB              0,0,2,3,0,0,0,0,0
  561 00000048 00 00 09 
              00 00 00 



ARM Macro Assembler    Page 14 


              00 05 04         DCB              0,0,9,0,0,0,0,5,4
  562 00000051         
  563 00000051         gridTwo
  564 00000051 01 07 00 
              00 03 03 
              00 03 03         DCB              1,7,0,0,3,3,0,3,3
  565 0000005A 07 00 00 
              00 00 06 
              09 00 00         DCB              7,0,0,0,0,6,9,0,0
  566 00000063 00 00 00 
              08 03 00 
              00 07 06         DCB              0,0,0,8,3,0,0,7,6
  567 0000006C 00 03 03 
              00 03 03 
              00 02 02         DCB              0,3,3,0,3,3,0,2,2
  568 00000075 00 00 05 
              04 01 08 
              07 00 00         DCB              0,0,5,4,1,8,7,0,0
  569 0000007E 00 00 00 
              07 00 00 
              00 00 00         DCB              0,0,0,7,0,0,0,0,0
  570 00000087 06 01 01 
              09 09 00 
              00 08 08         DCB              6,1,1,9,9,0,0,8,8
  571 00000090 00 00 02 
              03 00 00 
              00 05 00         DCB              0,0,2,3,0,0,0,5,0
  572 00000099 00 00 09 
              00 00 00 
              00 05 04         DCB              0,0,9,0,0,0,0,5,4
  573 000000A2         
  574 000000A2         gridThree
  575 000000A2 03 03 03 
              03 03 03 
              03 03 03         DCB              3,3,3,3,3,3,3,3,3
  576 000000AB 03 03 03 
              03 03 06 
              09 03 03         DCB              3,3,3,3,3,6,9,3,3
  577 000000B4 03 03 03 
              08 03 03 
              03 07 06         DCB              3,3,3,8,3,3,3,7,6
  578 000000BD 03 03 03 
              03 03 03 
              03 02 02         DCB              3,3,3,3,3,3,3,2,2
  579 000000C6 03 03 05 
              04 01 08 
              07 03 03         DCB              3,3,5,4,1,8,7,3,3
  580 000000CF 03 03 03 
              07 03 03 
              03 03 03         DCB              3,3,3,7,3,3,3,3,3
  581 000000D8 06 01 01 
              09 09 03 
              03 08 08         DCB              6,1,1,9,9,3,3,8,8
  582 000000E1 03 03 02 
              03 03 03 
              03 05 03         DCB              3,3,2,3,3,3,3,5,3
  583 000000EA 03 03 09 
              03 03 03 
              03 05 04         DCB              3,3,9,3,3,3,3,5,4



ARM Macro Assembler    Page 15 


  584 000000F3         
  585 000000F3                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\s
udoku.d -o.\sudoku.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -
IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB
 SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP S
ETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pred
efine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\sudoku.lst Sudoku.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Sudoku 00000000

Symbol: Sudoku
   Definitions
      At line 1 in file Sudoku.s
   Uses
      None
Comment: Sudoku unused
changeColumn 000006D8

Symbol: changeColumn
   Definitions
      At line 537 in file Sudoku.s
   Uses
      At line 521 in file Sudoku.s
Comment: changeColumn used once
checkThreeByThree 00000180

Symbol: checkThreeByThree
   Definitions
      At line 139 in file Sudoku.s
   Uses
      At line 58 in file Sudoku.s
Comment: checkThreeByThree used once
columnCheck 00000108

Symbol: columnCheck
   Definitions
      At line 101 in file Sudoku.s
   Uses
      At line 52 in file Sudoku.s
Comment: columnCheck used once
columnFor 0000011C

Symbol: columnFor
   Definitions
      At line 107 in file Sudoku.s
   Uses
      At line 106 in file Sudoku.s
      At line 123 in file Sudoku.s
      At line 129 in file Sudoku.s

columnGreaterThanNine 000000B8

Symbol: columnGreaterThanNine
   Definitions
      At line 75 in file Sudoku.s
   Uses
      At line 72 in file Sudoku.s
Comment: columnGreaterThanNine used once
done 0000067C

Symbol: done
   Definitions
      At line 508 in file Sudoku.s
   Uses
      At line 501 in file Sudoku.s
Comment: done used once
else3 0000063C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: else3
   Definitions
      At line 485 in file Sudoku.s
   Uses
      At line 479 in file Sudoku.s
      At line 481 in file Sudoku.s

endFor 0000065C

Symbol: endFor
   Definitions
      At line 499 in file Sudoku.s
   Uses
      At line 464 in file Sudoku.s
      At line 466 in file Sudoku.s

false 0000053C

Symbol: false
   Definitions
      At line 405 in file Sudoku.s
   Uses
      At line 190 in file Sudoku.s
      At line 194 in file Sudoku.s
      At line 198 in file Sudoku.s
      At line 202 in file Sudoku.s
      At line 210 in file Sudoku.s
      At line 214 in file Sudoku.s
      At line 218 in file Sudoku.s
      At line 222 in file Sudoku.s
      At line 230 in file Sudoku.s
      At line 234 in file Sudoku.s
      At line 238 in file Sudoku.s
      At line 242 in file Sudoku.s
      At line 270 in file Sudoku.s
      At line 274 in file Sudoku.s
      At line 278 in file Sudoku.s
      At line 282 in file Sudoku.s
      At line 290 in file Sudoku.s
      At line 294 in file Sudoku.s
      At line 298 in file Sudoku.s
      At line 302 in file Sudoku.s
      At line 310 in file Sudoku.s
      At line 314 in file Sudoku.s
      At line 318 in file Sudoku.s
      At line 322 in file Sudoku.s
      At line 350 in file Sudoku.s
      At line 354 in file Sudoku.s
      At line 358 in file Sudoku.s
      At line 362 in file Sudoku.s
      At line 370 in file Sudoku.s
      At line 374 in file Sudoku.s
      At line 378 in file Sudoku.s
      At line 382 in file Sudoku.s
      At line 390 in file Sudoku.s
      At line 394 in file Sudoku.s
      At line 398 in file Sudoku.s
      At line 402 in file Sudoku.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


finish 0000017C

Symbol: finish
   Definitions
      At line 136 in file Sudoku.s
   Uses
      None
Comment: finish unused
finishColumnFor 00000174

Symbol: finishColumnFor
   Definitions
      At line 133 in file Sudoku.s
   Uses
      At line 111 in file Sudoku.s
      At line 132 in file Sudoku.s

finishProgram 000006F0

Symbol: finishProgram
   Definitions
      At line 546 in file Sudoku.s
   Uses
      At line 523 in file Sudoku.s
Comment: finishProgram used once
finishRowFor 00000100

Symbol: finishRowFor
   Definitions
      At line 96 in file Sudoku.s
   Uses
      At line 74 in file Sudoku.s
      At line 95 in file Sudoku.s

finishedChecking 0000008C

Symbol: finishedChecking
   Definitions
      At line 60 in file Sudoku.s
   Uses
      At line 46 in file Sudoku.s
      At line 50 in file Sudoku.s
      At line 55 in file Sudoku.s

firstRow 000001DC

Symbol: firstRow
   Definitions
      At line 165 in file Sudoku.s
   Uses
      At line 147 in file Sudoku.s
      At line 149 in file Sudoku.s
      At line 151 in file Sudoku.s

firstRowFirstColumn 00000224

Symbol: firstRowFirstColumn
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 185 in file Sudoku.s
   Uses
      At line 167 in file Sudoku.s
      At line 169 in file Sudoku.s
      At line 171 in file Sudoku.s

firstRowSecondColumn 0000026C

Symbol: firstRowSecondColumn
   Definitions
      At line 205 in file Sudoku.s
   Uses
      At line 173 in file Sudoku.s
      At line 175 in file Sudoku.s
      At line 177 in file Sudoku.s

firstRowThirdColumn 000002B4

Symbol: firstRowThirdColumn
   Definitions
      At line 225 in file Sudoku.s
   Uses
      At line 179 in file Sudoku.s
      At line 181 in file Sudoku.s
      At line 183 in file Sudoku.s

for 000005E8

Symbol: for
   Definitions
      At line 462 in file Sudoku.s
   Uses
      At line 493 in file Sudoku.s
      At line 497 in file Sudoku.s

forPrint 00000698

Symbol: forPrint
   Definitions
      At line 519 in file Sudoku.s
   Uses
      At line 535 in file Sudoku.s
      At line 543 in file Sudoku.s

getSquare 00000018

Symbol: getSquare
   Definitions
      At line 22 in file Sudoku.s
   Uses
      At line 43 in file Sudoku.s
      At line 76 in file Sudoku.s
      At line 80 in file Sudoku.s
      At line 113 in file Sudoku.s
      At line 117 in file Sudoku.s
      At line 141 in file Sudoku.s
      At line 188 in file Sudoku.s
      At line 192 in file Sudoku.s
      At line 196 in file Sudoku.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 200 in file Sudoku.s
      At line 208 in file Sudoku.s
      At line 212 in file Sudoku.s
      At line 216 in file Sudoku.s
      At line 220 in file Sudoku.s
      At line 228 in file Sudoku.s
      At line 232 in file Sudoku.s
      At line 236 in file Sudoku.s
      At line 240 in file Sudoku.s
      At line 268 in file Sudoku.s
      At line 272 in file Sudoku.s
      At line 276 in file Sudoku.s
      At line 280 in file Sudoku.s
      At line 288 in file Sudoku.s
      At line 292 in file Sudoku.s
      At line 296 in file Sudoku.s
      At line 300 in file Sudoku.s
      At line 308 in file Sudoku.s
      At line 312 in file Sudoku.s
      At line 316 in file Sudoku.s
      At line 320 in file Sudoku.s
      At line 348 in file Sudoku.s
      At line 352 in file Sudoku.s
      At line 356 in file Sudoku.s
      At line 360 in file Sudoku.s
      At line 368 in file Sudoku.s
      At line 372 in file Sudoku.s
      At line 376 in file Sudoku.s
      At line 380 in file Sudoku.s
      At line 388 in file Sudoku.s
      At line 392 in file Sudoku.s
      At line 396 in file Sudoku.s
      At line 400 in file Sudoku.s
      At line 436 in file Sudoku.s
      At line 527 in file Sudoku.s

gridCheck 00000088

Symbol: gridCheck
   Definitions
      At line 57 in file Sudoku.s
   Uses
      At line 54 in file Sudoku.s
Comment: gridCheck used once
inValid 000000F8

Symbol: inValid
   Definitions
      At line 93 in file Sudoku.s
   Uses
      At line 90 in file Sudoku.s
Comment: inValid used once
inValid1 0000016C

Symbol: inValid1
   Definitions
      At line 130 in file Sudoku.s
   Uses
      At line 127 in file Sudoku.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: inValid1 used once
isValid 00000054

Symbol: isValid
   Definitions
      At line 41 in file Sudoku.s
   Uses
      At line 442 in file Sudoku.s
      At line 475 in file Sudoku.s

lessThanEight 00000588

Symbol: lessThanEight
   Definitions
      At line 432 in file Sudoku.s
   Uses
      At line 428 in file Sudoku.s
Comment: lessThanEight used once
notEight 000005D0

Symbol: notEight
   Definitions
      At line 452 in file Sudoku.s
   Uses
      At line 446 in file Sudoku.s
      At line 448 in file Sudoku.s

notValid2 0000064C

Symbol: notValid2
   Definitions
      At line 491 in file Sudoku.s
   Uses
      At line 477 in file Sudoku.s
Comment: notValid2 used once
print 00000680

Symbol: print
   Definitions
      At line 511 in file Sudoku.s
   Uses
      At line 18 in file Sudoku.s
Comment: print used once
resetTry 00000654

Symbol: resetTry
   Definitions
      At line 495 in file Sudoku.s
   Uses
      None
Comment: resetTry unused
rowCheck 00000094

Symbol: rowCheck
   Definitions
      At line 64 in file Sudoku.s
   Uses
      At line 47 in file Sudoku.s
Comment: rowCheck used once



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

rowFor 000000A8

Symbol: rowFor
   Definitions
      At line 70 in file Sudoku.s
   Uses
      At line 69 in file Sudoku.s
      At line 86 in file Sudoku.s
      At line 92 in file Sudoku.s

rowGreaterThanNine 0000012C

Symbol: rowGreaterThanNine
   Definitions
      At line 112 in file Sudoku.s
   Uses
      At line 109 in file Sudoku.s
Comment: rowGreaterThanNine used once
sameElement 000000E4

Symbol: sameElement
   Definitions
      At line 87 in file Sudoku.s
   Uses
      At line 83 in file Sudoku.s
Comment: sameElement used once
sameElement1 00000158

Symbol: sameElement1
   Definitions
      At line 124 in file Sudoku.s
   Uses
      At line 120 in file Sudoku.s
Comment: sameElement1 used once
secondRow 000002FC

Symbol: secondRow
   Definitions
      At line 245 in file Sudoku.s
   Uses
      At line 153 in file Sudoku.s
      At line 155 in file Sudoku.s
      At line 157 in file Sudoku.s

secondRowFirstColumn 00000344

Symbol: secondRowFirstColumn
   Definitions
      At line 265 in file Sudoku.s
   Uses
      At line 247 in file Sudoku.s
      At line 249 in file Sudoku.s
      At line 251 in file Sudoku.s

secondRowSecondColumn 0000038C

Symbol: secondRowSecondColumn
   Definitions
      At line 285 in file Sudoku.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 253 in file Sudoku.s
      At line 255 in file Sudoku.s
      At line 257 in file Sudoku.s

secondRowThirdColumn 000003D4

Symbol: secondRowThirdColumn
   Definitions
      At line 305 in file Sudoku.s
   Uses
      At line 259 in file Sudoku.s
      At line 261 in file Sudoku.s
      At line 263 in file Sudoku.s

setSquare 00000034

Symbol: setSquare
   Definitions
      At line 31 in file Sudoku.s
   Uses
      At line 471 in file Sudoku.s
      At line 507 in file Sudoku.s

squareNotZero 000005E0

Symbol: squareNotZero
   Definitions
      At line 458 in file Sudoku.s
   Uses
      At line 438 in file Sudoku.s
      At line 444 in file Sudoku.s

start 00000000

Symbol: start
   Definitions
      At line 8 in file Sudoku.s
   Uses
      At line 5 in file Sudoku.s
Comment: start used once
stop 00000014

Symbol: stop
   Definitions
      At line 20 in file Sudoku.s
   Uses
      At line 20 in file Sudoku.s
Comment: stop used once
sudoku 0000055C

Symbol: sudoku
   Definitions
      At line 416 in file Sudoku.s
   Uses
      At line 17 in file Sudoku.s
      At line 456 in file Sudoku.s
      At line 489 in file Sudoku.s




ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

thirdRow 0000041C

Symbol: thirdRow
   Definitions
      At line 325 in file Sudoku.s
   Uses
      At line 159 in file Sudoku.s
      At line 161 in file Sudoku.s
      At line 163 in file Sudoku.s

thirdRowFirstColumn 00000464

Symbol: thirdRowFirstColumn
   Definitions
      At line 345 in file Sudoku.s
   Uses
      At line 327 in file Sudoku.s
      At line 329 in file Sudoku.s
      At line 331 in file Sudoku.s

thirdRowSecondColumn 000004AC

Symbol: thirdRowSecondColumn
   Definitions
      At line 365 in file Sudoku.s
   Uses
      At line 333 in file Sudoku.s
      At line 335 in file Sudoku.s
      At line 337 in file Sudoku.s

thirdRowThirdColumn 000004F4

Symbol: thirdRowThirdColumn
   Definitions
      At line 385 in file Sudoku.s
   Uses
      At line 339 in file Sudoku.s
      At line 341 in file Sudoku.s
      At line 343 in file Sudoku.s

true 0000054C

Symbol: true
   Definitions
      At line 410 in file Sudoku.s
   Uses
      At line 203 in file Sudoku.s
      At line 223 in file Sudoku.s
      At line 243 in file Sudoku.s
      At line 283 in file Sudoku.s
      At line 303 in file Sudoku.s
      At line 323 in file Sudoku.s
      At line 363 in file Sudoku.s
      At line 383 in file Sudoku.s
      At line 403 in file Sudoku.s

validCheck 00000078

Symbol: validCheck



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 51 in file Sudoku.s
   Uses
      At line 49 in file Sudoku.s
Comment: validCheck used once
51 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Grids 00000000

Symbol: Grids
   Definitions
      At line 550 in file Sudoku.s
   Uses
      None
Comment: Grids unused
gridOne 00000000

Symbol: gridOne
   Definitions
      At line 552 in file Sudoku.s
   Uses
      At line 10 in file Sudoku.s
Comment: gridOne used once
gridThree 000000A2

Symbol: gridThree
   Definitions
      At line 574 in file Sudoku.s
   Uses
      None
Comment: gridThree unused
gridTwo 00000051

Symbol: gridTwo
   Definitions
      At line 563 in file Sudoku.s
   Uses
      None
Comment: gridTwo unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file Sudoku.s
   Uses
      None
Comment: getkey unused
main 00000000

Symbol: main
   Definitions
      At line 2 in file Sudoku.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file Sudoku.s
   Uses
      At line 529 in file Sudoku.s
      At line 531 in file Sudoku.s
      At line 539 in file Sudoku.s

3 symbols
398 symbols in table
